name: ci
on:
  workflow_dispatch: #github页面手动触发
  push: #push即触发
    tags:
      - "v*.*"
  pull_request:
    tags:
      - "v*.*"
env:
  IMAGE_NAME: v2ray-trojan

jobs:

  review:
    runs-on: ubuntu-20.04 #虚拟环境(github提供)
    env:
      TZ: Asia/Shanghai
    steps:
      - uses: actions/checkout@v2
      # 运行Codacy,可使用.codacy.yml配置
      - name: Codacy
        uses: codacy/codacy-analysis-cli-action@master
        with:
          # tool: PHP_CodeSniffer,PHP Mess Detector,PHPCPD,PHP Depend,phpmd,phpcs #参考: https://docs.codacy.com/getting-started/supported-languages-and-tools/
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          upload: true #上传"代码质量"报告到Codacy(因为本地审查代码,要关闭远程Codacy的审查功能(Repository analysis开启))
          format: sarif
          output: ../results.sarif #要求干净的环境,把文件放在项目外,否则会报错
          gh-code-scanning-compat: true #兼容Github的报错等级
          verbose: true #列出详情
          max-allowed-issues: 2147483647 #允许最大的"问题数"
      # 对接Github的Security菜单
      - name: Upload-github-sarif-reporter
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ../results.sarif

  get-tags:
    needs: review
    runs-on: ubuntu-20.04
    env:
      TZ: Asia/Shanghai
    outputs:
      tags: ${{ steps.set-output-id.outputs.tags }}
    steps:
      - uses: actions/checkout@v2
      - name: set-output
        id: set-output-id
        run: | #https://github.com/metcalfc/docker-action-examples/blob/main/.github/workflows/release.yml
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo ::set-output name=tags::${VERSION}

  push-docker-hub:
    needs: get-tags
    runs-on: ubuntu-20.04
    env:
      TZ: Asia/Shanghai
    steps:
      - uses: actions/checkout@v2
      - name: Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build && Push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.get-tags.outputs.tags }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  push-ghcr:
    needs: get-tags
    runs-on: ubuntu-20.04
    env:
      TZ: Asia/Shanghai
      REGISTRY: ghcr.io
    steps:
      - uses: actions/checkout@v2
      - name: Login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PACKAGES_TOKEN }}
      - name: Build && Push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.get-tags.outputs.tags }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest

  # push-github-packages:
  #   needs: get-tags
  #   runs-on: ubuntu-20.04
  #   env:
  #     REGISTRY: docker.pkg.github.com
  #     TZ: Asia/Shanghai
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Login
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.PACKAGES_TOKEN }}
  #     - name: Build && Push
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         push: true
  #         tags: |
  #           ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ needs.get-tags.outputs.tags }}
  #           ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
  #     - name: Delete Package
  #       uses: actions/delete-package-versions@v1
  #       with:
  #         package-name: ${{ env.IMAGE_NAME }}
  #         num-old-versions-to-delete: 1 #删除最旧的一个包
